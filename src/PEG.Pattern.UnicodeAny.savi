:: `PEG.Pattern.UnicodeAny` is used to consume any single arbitrary codepoint.
::
:: Parsing will fail if a valid UTF-8 codepoint couldn't be parsed.
:: Otherwise, the pattern succeeds, consuming the matched bytes.
:module PEG.Pattern.UnicodeAny(T PEG.Token.Kind)
  :is PEG.Pattern(T)

  :fun description: "any character"

  :is IntoString
  :fun into_string_space USize: "any".into_string_space
  :fun into_string(out String'ref): "any".into_string(out)

  :fun val check_match(
    source String
    offset USize
    state _State(T)
  ) _Result(T)
    // Use UTF8 decoding to find the end of the next codepoint.
    utf8_state = String.DecodeUTF8.State.new
    try (
      source.each_byte_with_index(offset, offset + 4) -> (byte, current_offset |
        utf8_state = String.DecodeUTF8.read_byte!(byte, utf8_state)

        // If we reach codepoint completion, return success.
        if utf8_state.is_done (
          return _Result(T).success(current_offset - offset + 1)
        )
      )
    )

    // Otherwise we've either run out of bytes or are pointing at invalid bytes.
    _Result(T).fail(0, @)
