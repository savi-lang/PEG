:: `PEG.Pattern.UnicodeAny` is used to consume any single arbitrary codepoint.
::
:: Parsing will fail if a valid UTF-8 codepoint couldn't be parsed.
:: Otherwise, the pattern succeeds, consuming the matched bytes.
:module PEG.Pattern.UnicodeAny(T PEG.Token.Kind)
  :is PEG.Pattern(T)

  :fun description: "any character"

  :is IntoString
  :fun into_string_space USize: "any".into_string_space
  :fun into_string(out String'iso): "any".into_string(--out)

  :fun val check_match(
    source String
    offset USize
    state _State(T)
  ) _Result(T)
    // Use UTF8 decoding to find the end of the next codepoint.
    codepoint U32 = 0
    utf8_state U8 = 0
    source.each_byte_with_index(offset, offset + 4) -> (byte, current_offset |
      codepoint = UTF8Decoding.read_byte_into_codepoint(byte, utf8_state, codepoint)
      utf8_state = UTF8Decoding.next_state(byte, utf8_state)

      // If we reach state zero, it means we've decoded a valid codepoint.
      return _Result(T).success(current_offset - offset + 1) if utf8_state.is_zero
    )

    // Otherwise we've either run out of bytes or are pointing at invalid bytes.
    _Result(T).fail(0, @)
