:: `PEG.Pattern.UnicodeRange` is used to consume a single character from within
:: a specified contiguous range of acceptable codepoints.
::
:: Parsing will fail if a valid UTF-8 codepoint couldn't be parsed,
:: or if the parsed codepoint didn't fall in the specified range.
:: Otherwise, the pattern succeeds, consuming the matched bytes.
:class PEG.Pattern.UnicodeRange(T PEG.Token.Kind)
  :is PEG.Pattern(T)

  :let min U32
  :let max U32
  :new (@min, @max)

  :fun description: "\(@min.format.unicode)..\(@max.format.unicode)"

  :is IntoString
  :fun into_string_space USize:
    "range(, )".size
    + @min.into_string_space
    + @max.into_string_space
  :fun into_string(out String'ref) None
    out << "range("
    @min.into_string(out)
    out << ", "
    @max.into_string(out)
    out << ")"

  :fun val check_match(
    source String
    offset USize
    state _State(T)
  ) _Result(T)
    // Use UTF8 decoding to get the next codepoint.
    codepoint U32 = 0
    utf8_state U8 = 0
    source.each_byte_with_index(offset, offset + 4) -> (byte, current_offset |
      codepoint = UTF8Decoding.read_byte_into_codepoint(byte, utf8_state, codepoint)
      utf8_state = UTF8Decoding.next_state(byte, utf8_state)

      // If we reach state zero, it means we've decoded a valid codepoint.
      // So we'll check if it's in the range of codepoints we were expecting.
      if utf8_state.is_zero (
        if (codepoint >= @min && codepoint <= @max) (
          return _Result(T).success(current_offset - offset + 1)
        |
          return _Result(T).fail(0, @)
        )
      )
    )

    // Otherwise we've either run out of bytes or are pointing at invalid bytes.
    _Result(T).fail(0, @)
